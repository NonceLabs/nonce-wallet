diff --git a/node_modules/react-native-randombytes/index.js b/node_modules/react-native-randombytes/index.js
index 7478cb3..9cb2294 100644
--- a/node_modules/react-native-randombytes/index.js
+++ b/node_modules/react-native-randombytes/index.js
@@ -1,57 +1,60 @@
-if (typeof Buffer === 'undefined') {
-  global.Buffer = require('buffer').Buffer
+if (typeof Buffer === "undefined") {
+  global.Buffer = require("buffer").Buffer;
 }
 
-let sjcl = require('sjcl')
-let RNRandomBytes = require('react-native').NativeModules.RNRandomBytes
+let sjcl = require("sjcl");
 
-function noop () {}
+function noop() {}
 
-function toBuffer (nativeStr) {
-  return new Buffer(nativeStr, 'base64')
+function toBuffer(nativeStr) {
+  return new Buffer(nativeStr, "base64");
 }
 
-function init () {
-  if (RNRandomBytes.seed) {
-    let seedBuffer = toBuffer(RNRandomBytes.seed)
-    addEntropy(seedBuffer)
+function rng(length) {
+  let uID = "";
+  let possible =
+    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789=/";
+  for (let i = 0; i < length; i++) {
+    uID += possible.charAt(Math.floor(Math.random() * possible.length));
+  }
+  return uID;
+}
+
+function init() {
+  if (rng(5464)) {
+    let seedBuffer = toBuffer(rng(5464));
+    addEntropy(seedBuffer);
   } else {
-    seedSJCL()
+    seedSJCL();
   }
 }
 
-function addEntropy (entropyBuf) {
-  let hexString = entropyBuf.toString('hex')
-  let stanfordSeed = sjcl.codec.hex.toBits(hexString)
-  sjcl.random.addEntropy(stanfordSeed)
+function addEntropy(entropyBuf) {
+  let hexString = entropyBuf.toString("hex");
+  let stanfordSeed = sjcl.codec.hex.toBits(hexString);
+  sjcl.random.addEntropy(stanfordSeed);
 }
 
-export function seedSJCL (cb) {
-  cb = cb || noop
-  randomBytes(4096, function (err, buffer) {
-    if (err) return cb(err)
+export function seedSJCL(cb) {
+  cb = cb || noop;
+  randomBytes(4096, function(err, buffer) {
+    if (err) return cb(err);
 
-    addEntropy(buffer)
-  })
+    addEntropy(buffer);
+  });
 }
 
-export function randomBytes (length, cb) {
+export function randomBytes(length, cb) {
   if (!cb) {
-    let size = length
-    let wordCount = Math.ceil(size * 0.25)
-    let randomBytes = sjcl.random.randomWords(wordCount, 10)
-    let hexString = sjcl.codec.hex.fromBits(randomBytes)
-    hexString = hexString.substr(0, size * 2)
-    return new Buffer(hexString, 'hex')
+    let size = length;
+    let wordCount = Math.ceil(size * 0.25);
+    let randomBytes = sjcl.random.randomWords(wordCount, 10);
+    let hexString = sjcl.codec.hex.fromBits(randomBytes);
+    hexString = hexString.substr(0, size * 2);
+    return new Buffer(hexString, "hex");
   }
 
-  RNRandomBytes.randomBytes(length, function(err, base64String) {
-    if (err) {
-      cb(err)
-    } else {
-      cb(null, toBuffer(base64String))
-    }
-  })
+  cb(rng(length))
 }
 
-init()
+init();
\ No newline at end of file
